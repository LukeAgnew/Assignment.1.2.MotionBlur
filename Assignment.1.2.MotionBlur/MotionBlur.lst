


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             MotionBlur, CODE, READONLY
    2 00000000                 IMPORT           main
    3 00000000                 IMPORT           getPicAddr
    4 00000000                 IMPORT           putPic
    5 00000000                 IMPORT           getPicWidth
    6 00000000                 IMPORT           getPicHeight
    7 00000000                 EXPORT           start
    8 00000000                 PRESERVE8
    9 00000000         
   10 00000000         start
   11 00000000         
   12 00000000 EBFFFFFE        BL               getPicAddr  ; load the start ad
                                                            dress of the image 
                                                            in R4
   13 00000004 E1A04000        MOV              R4, R0
   14 00000008 EBFFFFFE        BL               getPicHeight ; load the height 
                                                            of the image (rows)
                                                             in R5
   15 0000000C E1A05000        MOV              R5, R0
   16 00000010 EBFFFFFE        BL               getPicWidth ; load the width of
                                                             the image (columns
                                                            ) in R6
   17 00000014 E1A06000        MOV              R6, R0
   18 00000018         
   19 00000018 E1A00004        MOV              R0,R4       ; starting address 
                                                            parameter
   20 0000001C E1A01005        MOV              R1,R5       ; image height para
                                                            meter
   21 00000020 E1A02006        MOV              R2,R6       ; image width param
                                                            eter
   22 00000024 E3A0300B        MOV              R3,#11      ; radius of effect 
                                                            parameter
   23 00000028         
   24 00000028 EB000001        BL               motionBlur  ; invoke motionBlur
                                                            (address, height, w
                                                            idth, radius)
   25 0000002C         
   26 0000002C EBFFFFFE        BL               putPic      ; re-display the up
                                                            dated image
   27 00000030         
   28 00000030 EAFFFFFE 
                       stop    B                stop
   29 00000034         
   30 00000034         
   31 00000034         ; motionBlur subroutine
   32 00000034         ; Applies a "motion blur" effect to an image by replacin
                       g the Red, Green and Blue
   33 00000034         ; color values of each pixel with the average of the cor
                       responding color channels
   34 00000034         ; from the pixels in a line through each pixel.
   35 00000034         ; parameters R0: starting address of the image
   36 00000034         ;    R1: image height
   37 00000034         ;    R2: image width
   38 00000034         ;    R3: radius of effect
   39 00000034         
   40 00000034         motionBlur
   41 00000034 E92D5FF0        STMFD            SP!,{R4-R12,lr} 
                                                            ; save registers
   42 00000038         



ARM Macro Assembler    Page 2 


   43 00000038 E2433001        SUB              R3,R3,#1    ; radius = radius -
                                                             1
   44 0000003C E92D0003        STMFD            SP!,{R0-R1} ; save address and 
                                                            height to the syste
                                                            m stack
   45 00000040         
   46 00000040 E1A00003        MOV              R0,R3       ; dividend paramete
                                                            r
   47 00000044 E3A01002        MOV              R1,#2       ; divisor parameter
                                                            
   48 00000048         
   49 00000048 EB00005B        BL               divide      ; invoke divide(div
                                                            idend, divisor)
   50 0000004C E1A03000        MOV              R3,R0       ; radius = quotient
                                                            
   51 00000050         
   52 00000050 E8BD0003        LDMFD            SP!,{R0-R1} ; restore address a
                                                            nd height from the 
                                                            system stack
   53 00000054         
   54 00000054 E3A04000        LDR              R4,=0
   55 00000058         fori                                 ; for (int i=0; i<h
                                                            eight; i++)
   56 00000058 E1540001        CMP              R4,R1       ; {
   57 0000005C 2A000055        BHS              endfori
   58 00000060         
   59 00000060 E3A05000        LDR              R5,=0
   60 00000064         forj                                 ; for (int j=0; j<w
                                                            idth; j++)
   61 00000064 E1550002        CMP              R5,R2       ; {
   62 00000068 2A000050        BHS              endforj
   63 0000006C         
   64 0000006C E3A08000        MOV              R8,#0       ; indexOffset = 0
   65 00000070 E3A09000        MOV              R9,#0       ; redTotal = 0
   66 00000074 E3A0A000        MOV              R10,#0      ; greenTotal = 0
   67 00000078 E3A0B000        MOV              R11,#0      ; blueTotal = 0
   68 0000007C E3A0C000        MOV              R12,#0      ; pixelCount = 0
   69 00000080         
   70 00000080 E0457003        SUB              R7,R5,R3    ; channelj = j-radi
                                                            us
   71 00000084 E0446003        SUB              R6,R4,R3    ; channeli = i-radi
                                                            us
   72 00000088         
   73 00000088         checkIndices
   74 00000088 E3570000        CMP              R7,#0       ; if (channelj < 0)
                                                              
   75 0000008C BA000021        BLT              changeIndices ; { offset this i
                                                            ndex }  
   76 00000090         
   77 00000090 E3560000        CMP              R6,#0       ; if (channeli < 0)
                                                              
   78 00000094 BA00001F        BLT              changeIndices ; { offset this i
                                                            ndex } 
   79 00000098         
   80 00000098 E0848003        ADD              R8,R4,R3    ; channelLimit = i+
                                                            radius
   81 0000009C         forChannel
   82 0000009C E1560008        CMP              R6,R8       ; for (channeli; ch
                                                            anneli<channelLimit



ARM Macro Assembler    Page 3 


                                                            ; channeli++)
   83 000000A0 CA000022        BGT              endforChannel ; {
   84 000000A4         
   85 000000A4 E1560001        CMP              R6,R1       ; if (channeli < he
                                                            ight)
   86 000000A8 AA000020        BGE              endforChannel ; {
   87 000000AC         
   88 000000AC E1570002        CMP              R7,R2       ; if (channelj < wi
                                                            dth)
   89 000000B0 AA00001E        BGE              endforChannel ; {
   90 000000B4         
   91 000000B4         computeAverage
   92 000000B4 E92D000F        STMFD            SP!, {R0-R3} ; save address, he
                                                            ight, width and rad
                                                            ius to the system s
                                                            tack
   93 000000B8         
   94 000000B8 E1A01006        MOV              R1,R6       ; index i parameter
                                                            
   95 000000BC E1A03002        MOV              R3,R2       ; width parameter
   96 000000C0 E1A02007        MOV              R2,R7       ; index j parameter
                                                            
   97 000000C4         
   98 000000C4 EB000045        BL               getPixelR   ; invoke getPixelR(
                                                            address, i, j, widt
                                                            h)
   99 000000C8 E0899000        ADD              R9,R9,R0    ; redTotal += red c
                                                            omponent
  100 000000CC         
  101 000000CC E8BD000F        LDMFD            SP!,{R0-R3} ; restore address, 
                                                            height, width and r
                                                            adius from the syst
                                                            em stack
  102 000000D0         
  103 000000D0 E92D000F        STMFD            SP!, {R0-R3} ; save address, he
                                                            ight, width and rad
                                                            ius to the system s
                                                            tack
  104 000000D4         
  105 000000D4 E1A01006        MOV              R1,R6       ; index i parameter
                                                            
  106 000000D8 E1A03002        MOV              R3,R2       ; width parameter
  107 000000DC E1A02007        MOV              R2,R7       ; index j parameter
                                                            
  108 000000E0         
  109 000000E0 EB000044        BL               getPixelG   ; invoke getPixelG(
                                                            address, i, j, widt
                                                            h)
  110 000000E4 E08AA000        ADD              R10,R10,R0  ; greenTotal += gre
                                                            en component
  111 000000E8         
  112 000000E8 E8BD000F        LDMFD            SP!,{R0-R3} ; restore address f
                                                            rom the system stac
                                                            k
  113 000000EC         
  114 000000EC E92D000F        STMFD            SP!, {R0-R3} ; save height, wid
                                                            th and radius to th
                                                            e system stack
  115 000000F0         



ARM Macro Assembler    Page 4 


  116 000000F0 E1A01006        MOV              R1,R6       ; index i parameter
                                                            
  117 000000F4 E1A03002        MOV              R3,R2       ; width parameter
  118 000000F8 E1A02007        MOV              R2,R7       ; index j parameter
                                                            
  119 000000FC         
  120 000000FC EB000045        BL               getPixelB   ; invoke getPixelB(
                                                            address, i, j, widt
                                                            h)
  121 00000100 E08BB000        ADD              R11,R11,R0  ; blueTotal += blue
                                                             component
  122 00000104         
  123 00000104 E8BD000F        LDMFD            SP!,{R0-R3} ; restore height, w
                                                            idth and radius fro
                                                            m the system stack
  124 00000108         
  125 00000108 E28CC001        ADD              R12,R12,#1  ; pixelCount++
  126 0000010C         ; }
  127 0000010C         endcomputeAverage                    ; }
  128 0000010C         
  129 0000010C E2877001        ADD              R7,R7,#1    ; channelj++
  130 00000110 E2866001        ADD              R6,R6,#1    ; channeli++
  131 00000114         
  132 00000114 EAFFFFE0        B                forChannel  ; }
  133 00000118         
  134 00000118         changeIndices
  135 00000118 E2888001        ADD              R8,R8,#1    ; indexOffset++
  136 0000011C         
  137 0000011C E0857008        ADD              R7,R5,R8    ; channelj = j + in
                                                            dexOffset
  138 00000120 E0846008        ADD              R6,R4,R8    ; channeli = i + in
                                                            dexOffset
  139 00000124         
  140 00000124 E0477003        SUB              R7,R7,R3    ; channelj = channe
                                                            lj - radius
  141 00000128 E0466003        SUB              R6,R6,R3    ; channeli = channe
                                                            li - radius
  142 0000012C         
  143 0000012C EAFFFFD5        B                checkIndices
  144 00000130         endchangeIndices
  145 00000130         endforChannel
  146 00000130         
  147 00000130 E92D0003        STMFD            SP!,{R0-R1} ; store address and
                                                             height to the syst
                                                            em stack
  148 00000134         
  149 00000134 E1A00009        MOV              R0,R9       ; dividend paramete
                                                            r
  150 00000138 E1A0100C        MOV              R1,R12      ; divisor parameter
                                                            
  151 0000013C         
  152 0000013C EB00001E        BL               divide      ; invoke divide(div
                                                            idend, divisor) 
  153 00000140 E1A09000        MOV              R9,R0       ; redAverage = quot
                                                            ient
  154 00000144         
  155 00000144 E1A0000A        MOV              R0,R10      ; dividend paramete
                                                            r
  156 00000148 E1A0100C        MOV              R1,R12      ; divisor parameter



ARM Macro Assembler    Page 5 


                                                            
  157 0000014C         
  158 0000014C EB00001A        BL               divide      ; invoke divide(div
                                                            idend, divisor) 
  159 00000150 E1A0A000        MOV              R10,R0      ; greenAverage = qu
                                                            otient
  160 00000154         
  161 00000154 E1A0000B        MOV              R0,R11      ; dividend paramete
                                                            r
  162 00000158 E1A0100C        MOV              R1,R12      ; divisor parameter
                                                            
  163 0000015C         
  164 0000015C EB000016        BL               divide      ; invoke divide(div
                                                            idend, divisor) 
  165 00000160 E1A0B000        MOV              R11,R0      ; blueAverage = quo
                                                            tient
  166 00000164         
  167 00000164 E8BD0003        LDMFD            SP!,{R0-R1} ; restore address a
                                                            nd height from the 
                                                            system stack
  168 00000168         
  169 00000168 E92D000F        STMFD            SP!,{R0-R3} ; store address, he
                                                            ight, width and rad
                                                            ius to the system s
                                                            tack
  170 0000016C         
  171 0000016C E1A01004        MOV              R1,R4       ; index i parameter
                                                            
  172 00000170 E1A03002        MOV              R3,R2       ; width parameter
  173 00000174 E1A02005        MOV              R2,R5       ; index j parameter
                                                            
  174 00000178 E52D9004        STR              R9, [SP, #-4]! 
                                                            ; value parameter 
  175 0000017C         
  176 0000017C EB00002C        BL               setPixelR   ; invoke setPixelR(
                                                            address, i, j, widt
                                                            h, value) 
  177 00000180 E28DD004        ADD              SP,SP,#4    ; pop parameter off
                                                             the stack
  178 00000184         
  179 00000184 E1A01004        MOV              R1,R4       ; i parameter = i
  180 00000188 E52DA004        STR              R10, [SP, #-4]! 
                                                            ; value parameter
  181 0000018C         
  182 0000018C EB000032        BL               setPixelG   ; invoke setPixelG(
                                                            address, i, j, widt
                                                            h, value) 
  183 00000190 E28DD004        ADD              SP,SP,#4    ; pop parameter off
                                                             the stack
  184 00000194         
  185 00000194 E1A01004        MOV              R1,R4       ; i parameter = i
  186 00000198 E52DB004        STR              R11, [SP, #-4]! 
                                                            ; value parameter
  187 0000019C         
  188 0000019C EB000038        BL               setPixelB   ; invoke setPixelB(
                                                            address, i, j, widt
                                                            h, value) 
  189 000001A0 E28DD004        ADD              SP,SP,#4    ; pop parameter off
                                                             the stack



ARM Macro Assembler    Page 6 


  190 000001A4         
  191 000001A4 E8BD000F        LDMFD            SP!,{R0-R3} ; restore height, w
                                                            idth and radius fro
                                                            m the system stack
  192 000001A8         
  193 000001A8 E2855001        ADD              R5,R5,#1
  194 000001AC EAFFFFAC        B                forj        ; }
  195 000001B0         endforj
  196 000001B0         
  197 000001B0 E2844001        ADD              R4,R4,#1
  198 000001B4 EAFFFFA7        B                fori        ; }
  199 000001B8         endfori
  200 000001B8         
  201 000001B8 E8BD9FF0        LDMFD            SP!, {R4-R12,pc} 
                                                            ; restore registers
                                                            
  202 000001BC         
  203 000001BC         
  204 000001BC         ; divide subroutine
  205 000001BC         ; Takes a number (the dividend) and divides it by anothe
                       r number (the divisor) and
  206 000001BC         ; then returns the result (the quotient)
  207 000001BC         ; parameters   R0: The dividend, i.e. the number to be d
                       ivided
  208 000001BC         ;      R1: The divisor, i.e. the number to divide into t
                       he dividend
  209 000001BC         ; return value R0: quotient
  210 000001BC         
  211 000001BC         divide
  212 000001BC E92D4010        STMFD            sp!, {R4, lr} ; save registers
  213 000001C0 E3A04000        MOV              R4,#0       ; quotient = 0
  214 000001C4 E1500001 
                       wh      CMP              R0, R1      ; while (dividend >
                                                             divisor)
  215 000001C8 3A000002        BLO              endwh       ; {
  216 000001CC E0400001        SUB              R0, R0, R1  ; dividend = divide
                                                            nd - divisor
  217 000001D0 E2844001        ADD              R4,R4,#1    ; quotient = quotie
                                                            nt + 1
  218 000001D4 EAFFFFFA        B                wh          ; }
  219 000001D8         endwh
  220 000001D8 E1A00004        MOV              R0,R4       ; return value = qu
                                                            otient
  221 000001DC E8BD8010        LDMFD            sp!, {R4, pc} 
                                                            ; restore registers
                                                            
  222 000001E0         
  223 000001E0         
  224 000001E0         ; getPixelR subroutine
  225 000001E0         ; Retrieves the Red color component of a specified pixel
                       
  226 000001E0         ; from a two-dimensional array of pixels.
  227 000001E0         ; parameters R0: starting address of the array
  228 000001E0         ;    R1: index i of the pixel
  229 000001E0         ;    R2: index j of the pixel
  230 000001E0         ;    R3: width of the array
  231 000001E0         
  232 000001E0         getPixelR
  233 000001E0 E92D4010        STMFD            SP!, {R4, lr} ; save registers



ARM Macro Assembler    Page 7 


  234 000001E4         
  235 000001E4 E0010193        MUL              R1,R3,R1    ; row * rowSize    
                                                              
  236 000001E8 E0811002        ADD              R1,R1,R2    ; row*rowSize + col
                                                            umn 
  237 000001EC         
  238 000001EC E7900101        LDR              R0, [R0, R1, LSL #2] ; pixel = 
                                                            Memory.Word[address
                                                             + (index * 4)]
  239 000001F0 E1A00820        MOV              R0,R0, LSR #16 ; redComponent =
                                                             pixel shifted righ
                                                            t by 16 bits
  240 000001F4         
  241 000001F4 E8BD8010        LDMFD            SP!, {R4,PC} 
                                                            ; restore registers
                                                            
  242 000001F8         
  243 000001F8         
  244 000001F8         ; getPixelG subroutine
  245 000001F8         ; Retrieves the Green color component of a specified pix
                       el
  246 000001F8         ; from a two-dimensional array of pixels.
  247 000001F8         ; parameters R0: starting address of the array
  248 000001F8         ;    R1: index i of the pixel
  249 000001F8         ;    R2: index j of the pixel
  250 000001F8         ;    R3: width of the array
  251 000001F8         
  252 000001F8         getPixelG
  253 000001F8 E92D4010        STMFD            SP!, {R4, lr} ; save registers
  254 000001FC         
  255 000001FC E0010193        MUL              R1,R3,R1    ; row * rowSize    
                                                              
  256 00000200 E0811002        ADD              R1,R1,R2    ; row*rowSize + col
                                                            umn 
  257 00000204         
  258 00000204 E7900101        LDR              R0, [R0, R1, LSL #2] ; pixel = 
                                                            Memory.Word[address
                                                             + (index * 4)]
  259 00000208 E1A00420        MOV              R0,R0,LSR #8 ; greenComponent =
                                                             pixel shifted righ
                                                            t by 8 bits and
  260 0000020C         
  261 0000020C E59F4094        LDR              R4,=0xFFFFFF00 ; combined with 
                                                            a mask to clear the
                                                             redComponent value
                                                            
  262 00000210 E1C00004        BIC              R0,R0,R4
  263 00000214         
  264 00000214 E8BD8010        LDMFD            SP!, {R4,PC} 
                                                            ; restore registers
                                                            
  265 00000218         
  266 00000218         
  267 00000218         ; getPixelB subroutine
  268 00000218         ; Retrieves the Blue color component of a specified pixe
                       l
  269 00000218         ; from a two-dimensional array of pixels.
  270 00000218         ; parameters R0: starting address of the array
  271 00000218         ;    R1: index i of the pixel



ARM Macro Assembler    Page 8 


  272 00000218         ;    R2: index j of the pixel
  273 00000218         ;    R3: width of the array
  274 00000218         
  275 00000218         getPixelB
  276 00000218 E92D4010        STMFD            SP!, {R4, lr} ; save registers
  277 0000021C         
  278 0000021C E0010193        MUL              R1,R3,R1    ; row * rowSize    
                                                              
  279 00000220 E0811002        ADD              R1,R1,R2    ; row*rowSize + col
                                                            umn 
  280 00000224         
  281 00000224 E7900101        LDR              R0, [R0, R1, LSL #2] ; pixel = 
                                                            Memory.Word[address
                                                             + (index * 4)]
  282 00000228 E59F4078        LDR              R4,=0xFFFFFF00 ; blueComponent 
                                                            = pixel combined wi
                                                            th a mask to clear
  283 0000022C E1C00004        BIC              R0,R0,R4    ; the redComponent 
                                                            and greenComponent 
                                                            values
  284 00000230         
  285 00000230 E8BD8010        LDMFD            SP!, {R4,PC} 
                                                            ; restore registers
                                                            
  286 00000234         
  287 00000234         ; setPixelR subroutine
  288 00000234         ; Sets the Red color component of a specified pixel in a
                       
  289 00000234         ; two-dimensional array of pixels.
  290 00000234         ; parameters R0: starting address of the array
  291 00000234         ;    R1: index i of pixel
  292 00000234         ;    R2: index j of pixel
  293 00000234         ;    R3: width of the array
  294 00000234         ;      [SP]: value added to the stack
  295 00000234         setPixelR
  296 00000234 E92D4030        STMFD            SP!, {R4-R5, lr} 
                                                            ; save registers
  297 00000238         
  298 00000238 E0010193        MUL              R1,R3,R1    ; row * rowSize
  299 0000023C E0811002        ADD              R1,R1,R2    ; row*rowSize + col
                                                            umn
  300 00000240         
  301 00000240 E7904101        LDR              R4,[R0, R1, LSL #2] ; pixel = M
                                                            emory.Word[address 
                                                            + (index*4)]
  302 00000244         
  303 00000244 E3C448FF        BIC              R4,R4,#0x00FF0000 ; clear the p
                                                            ixel's current redC
                                                            omponent value
  304 00000248         
  305 00000248 E59D500C        LDR              R5,[SP, #0 + 12] ; load the red
                                                            Component value fro
                                                            m the stack 
  306 0000024C E1A05805        MOV              R5,R5,LSL #16 ; shift redCompon
                                                            ent value left by 1
                                                            6 bits
  307 00000250         
  308 00000250 E0844005        ADD              R4,R4,R5    ; add this redCompo
                                                            nent value to the p



ARM Macro Assembler    Page 9 


                                                            ixel
  309 00000254         
  310 00000254 E7804101        STR              R4, [R0, R1, LSL #2] ; Memory.W
                                                            ord[address + (inde
                                                            x*4)] = pixel
  311 00000258         
  312 00000258 E8BD8030        LDMFD            SP!, {R4-R5, pc} 
                                                            ; restore registers
                                                            
  313 0000025C         
  314 0000025C         
  315 0000025C         ; setPixelG subroutine
  316 0000025C         ; Sets the Green color component of a specified pixel in
                        a
  317 0000025C         ; two-dimensional array of pixels.
  318 0000025C         ; parameters R0: starting address of the array
  319 0000025C         ;    R1: index i of pixel
  320 0000025C         ;    R2: index j of pixel
  321 0000025C         ;    R3: width of the array
  322 0000025C         ;      [SP]: value added to the stack
  323 0000025C         setPixelG
  324 0000025C E92D4030        STMFD            SP!, {R4-R5, lr} 
                                                            ; save registers
  325 00000260         
  326 00000260 E0010193        MUL              R1,R3,R1    ; row * rowSize
  327 00000264 E0811002        ADD              R1,R1,R2    ; row*rowSize + col
                                                            umn
  328 00000268         
  329 00000268 E7904101        LDR              R4,[R0, R1, LSL #2] ; pixel = M
                                                            emory.Word[address 
                                                            + (index*4)]
  330 0000026C         
  331 0000026C E3C44CFF        BIC              R4,R4,#0x0000FF00 ; clear the p
                                                            ixel's current gree
                                                            nComponent value
  332 00000270         
  333 00000270 E59D500C        LDR              R5,[SP, #0 + 12] ; load the gre
                                                            enComponent value f
                                                            rom the stack  
  334 00000274 E1A05405        MOV              R5,R5,LSL #8 ; shift the greenC
                                                            omponent value left
                                                             by 8 bits
  335 00000278         
  336 00000278 E0844005        ADD              R4,R4,R5    ; add this greenCom
                                                            ponent value to the
                                                             pixel
  337 0000027C         
  338 0000027C E7804101        STR              R4, [R0, R1, LSL #2] ; Memory.W
                                                            ord[address + (inde
                                                            x*4)] = pixel
  339 00000280         
  340 00000280 E8BD8030        LDMFD            SP!, {R4-R5, pc} 
                                                            ; restore registers
                                                            
  341 00000284         
  342 00000284         
  343 00000284         ; setPixelB subroutine
  344 00000284         ; Sets the Blue color component of a specified pixel in 
                       a



ARM Macro Assembler    Page 10 


  345 00000284         ; two-dimensional array of pixels.
  346 00000284         ; parameters R0: starting address of the array
  347 00000284         ;    R1: index i of pixel
  348 00000284         ;    R2: index j of pixel
  349 00000284         ;    R3: width of the array
  350 00000284         ;      [SP]: value added to the stack
  351 00000284         setPixelB
  352 00000284 E92D4030        STMFD            SP!, {R4-R5, lr} 
                                                            ; save registers
  353 00000288         
  354 00000288 E0010193        MUL              R1,R3,R1    ; row * rowSize
  355 0000028C E0811002        ADD              R1,R1,R2    ; row*rowSize + col
                                                            umn
  356 00000290         
  357 00000290 E7904101        LDR              R4,[R0, R1, LSL #2] ; pixel = M
                                                            emory.Word[address 
                                                            + (index*4)]
  358 00000294         
  359 00000294 E3C440FF        BIC              R4,R4,#0x000000FF ; clear the p
                                                            ixel's current blue
                                                            Component value
  360 00000298         
  361 00000298 E59D500C        LDR              R5,[SP, #0 + 12] ; load the blu
                                                            eComponent value fr
                                                            om the system stack
                                                            
  362 0000029C         
  363 0000029C E0844005        ADD              R4,R4,R5    ; add this blueComp
                                                            onent value to the 
                                                            pixel
  364 000002A0         
  365 000002A0 E7804101        STR              R4, [R0, R1, LSL #2] ; Memory.W
                                                            ord[address + (addr
                                                            ess*4)] = pixel
  366 000002A4         
  367 000002A4 E8BD8030        LDMFD            SP!, {R4-R5, pc} 
                                                            ; restore registers
                                                            
  368 000002A8         
  369 000002A8                 END
              FFFFFF00 
Command Line: --debug --xref --apcs=interwork --depend=MotionBlur.d -oMotionBlu
r.o -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\Philips --predefine="__EVAL SETA 1" --p
redefine="__MICROLIB SETA 1" --predefine="NO_CLOCK_SETUP SETA 1" --predefine="N
O_EMC_SETUP SETA 1" --predefine="RAM_INTVEC SETA 1" --predefine="RAM_MODE SETA 
1" --predefine="REMAP SETA 1" --list=MotionBlur.lst MotionBlur.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

MotionBlur 00000000

Symbol: MotionBlur
   Definitions
      At line 1 in file MotionBlur.s
   Uses
      None
Comment: MotionBlur unused
changeIndices 00000118

Symbol: changeIndices
   Definitions
      At line 134 in file MotionBlur.s
   Uses
      At line 75 in file MotionBlur.s
      At line 78 in file MotionBlur.s

checkIndices 00000088

Symbol: checkIndices
   Definitions
      At line 73 in file MotionBlur.s
   Uses
      At line 143 in file MotionBlur.s
Comment: checkIndices used once
computeAverage 000000B4

Symbol: computeAverage
   Definitions
      At line 91 in file MotionBlur.s
   Uses
      None
Comment: computeAverage unused
divide 000001BC

Symbol: divide
   Definitions
      At line 211 in file MotionBlur.s
   Uses
      At line 49 in file MotionBlur.s
      At line 152 in file MotionBlur.s
      At line 158 in file MotionBlur.s
      At line 164 in file MotionBlur.s

endchangeIndices 00000130

Symbol: endchangeIndices
   Definitions
      At line 144 in file MotionBlur.s
   Uses
      None
Comment: endchangeIndices unused
endcomputeAverage 0000010C

Symbol: endcomputeAverage
   Definitions
      At line 127 in file MotionBlur.s
   Uses
      None



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Comment: endcomputeAverage unused
endforChannel 00000130

Symbol: endforChannel
   Definitions
      At line 145 in file MotionBlur.s
   Uses
      At line 83 in file MotionBlur.s
      At line 86 in file MotionBlur.s
      At line 89 in file MotionBlur.s

endfori 000001B8

Symbol: endfori
   Definitions
      At line 199 in file MotionBlur.s
   Uses
      At line 57 in file MotionBlur.s
Comment: endfori used once
endforj 000001B0

Symbol: endforj
   Definitions
      At line 195 in file MotionBlur.s
   Uses
      At line 62 in file MotionBlur.s
Comment: endforj used once
endwh 000001D8

Symbol: endwh
   Definitions
      At line 219 in file MotionBlur.s
   Uses
      At line 215 in file MotionBlur.s
Comment: endwh used once
forChannel 0000009C

Symbol: forChannel
   Definitions
      At line 81 in file MotionBlur.s
   Uses
      At line 132 in file MotionBlur.s
Comment: forChannel used once
fori 00000058

Symbol: fori
   Definitions
      At line 55 in file MotionBlur.s
   Uses
      At line 198 in file MotionBlur.s
Comment: fori used once
forj 00000064

Symbol: forj
   Definitions
      At line 60 in file MotionBlur.s
   Uses
      At line 194 in file MotionBlur.s
Comment: forj used once



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

getPixelB 00000218

Symbol: getPixelB
   Definitions
      At line 275 in file MotionBlur.s
   Uses
      At line 120 in file MotionBlur.s
Comment: getPixelB used once
getPixelG 000001F8

Symbol: getPixelG
   Definitions
      At line 252 in file MotionBlur.s
   Uses
      At line 109 in file MotionBlur.s
Comment: getPixelG used once
getPixelR 000001E0

Symbol: getPixelR
   Definitions
      At line 232 in file MotionBlur.s
   Uses
      At line 98 in file MotionBlur.s
Comment: getPixelR used once
motionBlur 00000034

Symbol: motionBlur
   Definitions
      At line 40 in file MotionBlur.s
   Uses
      At line 24 in file MotionBlur.s
Comment: motionBlur used once
setPixelB 00000284

Symbol: setPixelB
   Definitions
      At line 351 in file MotionBlur.s
   Uses
      At line 188 in file MotionBlur.s
Comment: setPixelB used once
setPixelG 0000025C

Symbol: setPixelG
   Definitions
      At line 323 in file MotionBlur.s
   Uses
      At line 182 in file MotionBlur.s
Comment: setPixelG used once
setPixelR 00000234

Symbol: setPixelR
   Definitions
      At line 295 in file MotionBlur.s
   Uses
      At line 176 in file MotionBlur.s
Comment: setPixelR used once
start 00000000

Symbol: start



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 10 in file MotionBlur.s
   Uses
      At line 7 in file MotionBlur.s
Comment: start used once
stop 00000030

Symbol: stop
   Definitions
      At line 28 in file MotionBlur.s
   Uses
      At line 28 in file MotionBlur.s
Comment: stop used once
wh 000001C4

Symbol: wh
   Definitions
      At line 214 in file MotionBlur.s
   Uses
      At line 218 in file MotionBlur.s
Comment: wh used once
24 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

getPicAddr 00000000

Symbol: getPicAddr
   Definitions
      At line 3 in file MotionBlur.s
   Uses
      At line 12 in file MotionBlur.s
Comment: getPicAddr used once
getPicHeight 00000000

Symbol: getPicHeight
   Definitions
      At line 6 in file MotionBlur.s
   Uses
      At line 14 in file MotionBlur.s
Comment: getPicHeight used once
getPicWidth 00000000

Symbol: getPicWidth
   Definitions
      At line 5 in file MotionBlur.s
   Uses
      At line 16 in file MotionBlur.s
Comment: getPicWidth used once
main 00000000

Symbol: main
   Definitions
      At line 2 in file MotionBlur.s
   Uses
      None
Comment: main unused
putPic 00000000

Symbol: putPic
   Definitions
      At line 4 in file MotionBlur.s
   Uses
      At line 26 in file MotionBlur.s
Comment: putPic used once
5 symbols
362 symbols in table
